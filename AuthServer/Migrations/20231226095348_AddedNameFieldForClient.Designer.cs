// <auto-generated />
using System;
using AuthServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231226095348_AddedNameFieldForClient")]
    partial class AddedNameFieldForClient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("AuthServer.Data.Models.AccessToken", b =>
                {
                    b.Property<int>("AccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessTokenString")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Revoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccessTokenId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessTokens");

                    b.HasData(
                        new
                        {
                            AccessTokenId = 1,
                            ClientId = "sofcopayclientid",
                            Expiration = new DateTime(2023, 12, 26, 12, 8, 48, 405, DateTimeKind.Local).AddTicks(9178),
                            Revoked = false,
                            Scopes = "[]",
                            UserId = "adminuserid"
                        },
                        new
                        {
                            AccessTokenId = 2,
                            ClientId = "sofcosmsclientid",
                            Expiration = new DateTime(2023, 12, 26, 12, 8, 48, 405, DateTimeKind.Local).AddTicks(9185),
                            Revoked = false,
                            Scopes = "[]",
                            UserId = "adminuserid"
                        });
                });

            modelBuilder.Entity("AuthServer.Data.Models.AuthorizationCode", b =>
                {
                    b.Property<int>("AuthorizationCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthCodeString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeChallengeMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Used")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorizationCodeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorizationCodes");

                    b.HasData(
                        new
                        {
                            AuthorizationCodeId = 1,
                            AuthCodeString = "4448e663-f412-4bc5-bab7-31b8c33a394d",
                            ClientId = "sofcopayclientid",
                            CodeChallenge = "authcode1challenge",
                            CodeChallengeMethod = "Plain",
                            Expiration = new DateTime(2023, 12, 26, 12, 3, 48, 405, DateTimeKind.Local).AddTicks(9061),
                            Used = false,
                            UserId = "adminuserid"
                        },
                        new
                        {
                            AuthorizationCodeId = 2,
                            AuthCodeString = "383f5e1f-7fbe-49e4-b53d-bd4b77a4b660",
                            ClientId = "sofcosmsclientid",
                            CodeChallenge = "authcode2challenge",
                            CodeChallengeMethod = "Plain",
                            Expiration = new DateTime(2023, 12, 26, 12, 3, 48, 405, DateTimeKind.Local).AddTicks(9139),
                            Used = false,
                            UserId = "adminuserid"
                        });
                });

            modelBuilder.Entity("AuthServer.Data.Models.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RedirectURIs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = "sofcopayclientid",
                            ClientSecret = "5ad092f4-94e9-469c-aa7b-d9c077d5dea7672bf35d-c928-4c03-9735-1b612230cd81",
                            Name = "sofco pay",
                            RedirectURIs = "[\"http://localhost:3000\"]",
                            Scopes = "[\"openid\"]",
                            UserId = "adminuserid"
                        },
                        new
                        {
                            ClientId = "sofcosmsclientid",
                            ClientSecret = "8ae3f553-e391-4614-9d0f-a796ba630da2109f83a3-b36a-486b-b394-8a07f11beecb",
                            Name = "sofco sms",
                            RedirectURIs = "[\"http://localhost:3001\"]",
                            Scopes = "[\"openid\"]",
                            UserId = "adminuserid"
                        });
                });

            modelBuilder.Entity("AuthServer.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorizationCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshTokenString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Revoked")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Used")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("AuthorizationCodeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");

                    b.HasData(
                        new
                        {
                            RefreshTokenId = 1,
                            AuthorizationCodeId = 1,
                            ClientId = "sofcopayclientid",
                            Expiration = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RefreshTokenString = "b156a22d-6406-4454-b37d-15ba7d7a01de",
                            Revoked = false,
                            Used = false,
                            UserId = "adminuserid"
                        },
                        new
                        {
                            RefreshTokenId = 2,
                            AuthorizationCodeId = 2,
                            ClientId = "sofcosmsclientid",
                            Expiration = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RefreshTokenString = "d777e4af-fd94-402a-b423-8efbe504c3e5",
                            Revoked = false,
                            Used = false,
                            UserId = "adminuserid"
                        });
                });

            modelBuilder.Entity("AuthServer.Data.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "adminuserid",
                            Email = "admin@sofco.org",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("AuthServer.Data.Models.AccessToken", b =>
                {
                    b.HasOne("AuthServer.Data.Models.Client", null)
                        .WithMany("AccessTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Data.Models.User", null)
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthServer.Data.Models.AuthorizationCode", b =>
                {
                    b.HasOne("AuthServer.Data.Models.Client", null)
                        .WithMany("AuthorizationCodes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Data.Models.User", null)
                        .WithMany("AuthorizationCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthServer.Data.Models.Client", b =>
                {
                    b.HasOne("AuthServer.Data.Models.User", null)
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthServer.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("AuthServer.Data.Models.AuthorizationCode", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AuthorizationCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AuthServer.Data.Models.Client", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Data.Models.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthServer.Data.Models.AuthorizationCode", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("AuthServer.Data.Models.Client", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("AuthorizationCodes");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("AuthServer.Data.Models.User", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("AuthorizationCodes");

                    b.Navigation("Clients");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
